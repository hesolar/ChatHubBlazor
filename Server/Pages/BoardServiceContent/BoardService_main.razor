
@using Server.Data.Services
@using Server.Data.Model
@using Server.Data.Model.MinesweeperLogic
@using Server.Data.Model.MinesweeperPresentation
@using BlazorStrap
@using Microsoft.Extensions.Primitives;
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.WebUtilities





@if( registroCorrecto || TableroActual.playerInRoom(username) ) {
    <Cronometro_Component dificultad="TableroActual.casillasAbiertas" rows="TableroActual.Logica.rows" timeToMove="TableroActual.timeToMove" valorCronometro="TableroActual.ValorCronometro"></Cronometro_Component>

    <br>
    <br>
    <Tablero ComenzarPartida="(e)=>ComenzarPartida(e)" TableroActual="TableroActual" username="@username" roomId="@roomId"></Tablero>
    <br>
    <br>
    <ChatRoom username="@username" roomid="roomId"></ChatRoom>
    <br>
    <br>
    <ScoreBoard_Component jugadores="this.TableroActual.Players.OrderBy(x => x.puntuacion).ToList()"></ScoreBoard_Component>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>
    <br>

}
else {
    <label>This game has already start , try other room!</label>
}



@code {
    [Parameter] public Partida TableroActual { get; set; }
    [Parameter] public String roomId { set; get; }
    [Parameter] public String username { get; set; }

    static  public Dictionary<string,List<Jugador>> jugadoresActulizacion;
    static public Dictionary<string,TimeSpan> Crono;

    public bool registroCorrecto = false;

    protected override void OnInitialized() {
        if( jugadoresActulizacion == null ) jugadoresActulizacion = new();
        if( Crono == null ) Crono = new();
        registroCorrecto = TableroActual.AddPlayer(username);


        var xd= TableroActual.Players.ToList();
        jugadoresActulizacion.Add(username,xd);
        var yd = TableroActual.ValorCronometro;
        Crono.Add(username,yd);

        InvokeAsync(ActualizarParametros);

    }
    public async Task ActualizarParametros(){
        while( !TableroActual.PartidaComenzada ) {
            await Task.Delay(200);
            if( jugadoresActulizacion[username].Count != TableroActual.Players.Count ) {
                jugadoresActulizacion[username] = TableroActual.Players;
                await InvokeAsync(StateHasChanged);
            }
        }
        jugadoresActulizacion = new();
        while( !TableroActual.Logica.Victory() ) {
            await Task.Delay(500);
            if(Crono[username]!= TableroActual.ValorCronometro ) {
                Crono[username] = TableroActual.ValorCronometro;
                StateHasChanged();
                await InvokeAsync(StateHasChanged);

            }
        }

    }
    public void Refresh() {
        InvokeAsync(StateHasChanged);
    }

    public async Task ComenzarPartida( System.EventArgs e ) {
        TableroActual.PartidaComenzada = true;
        Presentacion.UnlockBoard(TableroActual.Casillas);
        InvokeAsync(Comenzar);
    }
    public async Task Comenzar() {

        while( !TableroActual.Logica.Victory() ) {

            Presentacion.ActualizarVentanaDeslizante(TableroActual.Casillas);
            StateHasChanged();
            TableroActual.cronometroFuncionando = true;
            await TimeLapse();
            Presentacion.EstadoOriginalTablero(TableroActual.Casillas);
            StateHasChanged();
            TableroActual.nextTourn();
        }

    }
    public async Task TimeLapse() {
        while( TableroActual.cronometroFuncionando && !TableroActual.Logica.Victory() && !Presentacion.NingunaSeleccionada(TableroActual.Casillas) ) {
            await Task.Delay(1);
            if( TableroActual.ValorCronometro.TotalSeconds > 0 ) {
                await Task.Delay(100);
                TableroActual.ValorCronometro = TableroActual.ValorCronometro.Subtract(new TimeSpan(0,0,0,0,100));
                InvokeAsync(StateHasChanged);

            }
            else {
                //valorCronometro = new TimeSpan(0,0,(int) (Math.Round(timeToMove)));
                TableroActual.cronometroFuncionando = false;

                TableroActual.CurrentPlayerTourn().puntuacion += -5;
                InvokeAsync(StateHasChanged);

            }

        }
        TableroActual.Casillas.ForEach(x => x.ForEach(x => x.EstadoOriginal()));

        int miliseconds = Convert.ToInt32(1000 * (((double) TableroActual.casillasAbiertas / (double) (TableroActual.Logica.rows * TableroActual.Logica.rows)) * TableroActual.timeToMove));

        TableroActual.ValorCronometro = new TimeSpan(0,0,0,0,miliseconds);
        InvokeAsync(StateHasChanged);

    }



}
