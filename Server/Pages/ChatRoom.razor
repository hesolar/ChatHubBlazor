@page "/chatroom"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@using Server.Data
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives;

<h3>ChatRoom</h3>


<h3>This is the room rev 2.0 roomId: @roomid, still working on it:</h3>
<h3> Hello player: @username </h3>


<button type="button" @onclick="@BeginChat" hidden="@(this.userConnected)"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>







@if( this.userConnected ) {
  
    
<div class="card">
    <br>
    <label>banner to show current user</label>
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>You are connected as <b>@username</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
    </div>


    <label>Messages</label>
    <div id="scrollbox">
        @foreach( var item in msgs ) {
            @if( item.IsNotice ) {
                <div class="alert alert-info">@item.Body</div>
            }
            else {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }
        <hr />
        <textarea class="input-lg" placeholder="enter your comment" @bind="@newmsg"></textarea>

        <input type="button" @onclick="@(() => SendAsync(newmsg))" value="Send" />
    </div>


    </div>
}



@code {

    protected override void OnInitialized() {
        ReadQueryString();


    }
    public void ReadQueryString() {
        StringValues roomId;
        var uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if( QueryHelpers.ParseQuery(uri.Query).TryGetValue("roomid",out roomId) ) {
            this.roomid = roomId;
        }
        uri = navigationManager.ToAbsoluteUri(navigationManager.Uri);
        if( QueryHelpers.ParseQuery(uri.Query).TryGetValue("username",out roomId) ) {
            this.username = roomId;
        }
    }

    public string roomid { set; get; }
    public string username { set; get; }

    // flag to indicate chat status
    private bool userConnected = false;

    // name of the user who will be chatting





    // on-screen message
    private string msg;


    // new message input
    private string newmsg;

    // list of messages in chat
    private List<Message> msgs = new List<Message>();

    private string _hubUrl;
    private HubConnection _hubConnection;

    public async Task BeginChat() {

        if( !validateUserName()) return;
        //gestionar si no existe otro usuario con ese tag y la partida no ha comenzado
        try {
            // Start chatting and force refresh UI.
            userConnected = true;
            await Task.Delay(1);

            // remove old messages if any
            msgs.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + BlazorChatSampleHub.HubUrl;

            _hubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();

            _hubConnection.On<string,string>("Broadcast",BroadcastMessage);

            await _hubConnection.StartAsync();

            await SendAsync($"{username} joined room.");

        }
        catch( Exception e ) {
            msg = $"ERROR: Failed to start chat client: {e.Message}";
            userConnected = false;
        }
    }

    public bool validateUserName() {
        return !string.IsNullOrEmpty(this.username.Trim());
    }









    private void BroadcastMessage( string name,string message ) {
        bool isMine = name.Equals(username,StringComparison.OrdinalIgnoreCase);

        msgs.Add(new Message(name,message,isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }





    private async Task DisconnectAsync() {
        if( userConnected ) {
            await SendAsync($"[Notice] {username} left chat room.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();

            _hubConnection = null;
            userConnected = false;
        }
    }

    private async Task SendAsync( string message ) {
        if( userConnected && !string.IsNullOrWhiteSpace(message) ) {


            var a = _hubConnection;
            await _hubConnection.SendAsync("Broadcast",username,message);

            newmsg = string.Empty;
        }
    }

    private class Message {

        public string Username { get; set; }
        public string Body { get; set; }
        public bool Mine { get; set; }


        public Message( string username,string body,bool mine ) {
            Username = username;
            Body = body;
            Mine = mine;
        }



        public bool IsNotice => Body.StartsWith("[Notice]");

        public string CSS => Mine ? "sent" : "received";
    }
}
