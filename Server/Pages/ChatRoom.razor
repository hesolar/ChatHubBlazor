@page "/chatroom"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client;
@using Server.Data
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives;
@using Server.Data.Model
@using BlazorStrap


<button type="button" @onclick="@BeginChat" hidden="@(this.userConnected)"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

@if( this.userConnected ) {

    <div class="card" style="border:dashed; width:550px">
        

        <div class="alert alert-secondary mt-4" role="alert">
            <span class="oi oi-person mr-2" aria-hidden="true"></span>
            <span>You are connected as <b>@username</b></span>

            <br>

            <br>
            <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectAsync">Disconnect</button>
        </div>
        <h3>ChatRoom Component</h3>

        <label>Messages</label>
        <div id="scrollbox">
            @foreach( var item in msgs ) {
                @if( item.IsNotice ) {
                    <div class="alert alert-info"> @item.Body</div>
                }
                else {
                    <div class="@item.CSS">
                        <div class="user">@item.Username</div>
                        <div class="msg">@item.Body</div>
                    </div>
                }
            }
            <hr />
            <textarea class="input-lg" placeholder="enter your comment" @bind="@newmsg"></textarea>

            <input type="button" @onclick="@(() => SendAsync(newmsg))" value="Send" />
        </div>


    </div>
}



@code {


    [Parameter]
    public string roomid { set; get; }
    [Parameter]
    public string username { set; get; }



    // flag to indicate player status
    private bool userConnected = false;


    // on-screen message
    private string msg;
    // new message input
    private string newmsg;

    // list of messages in chat
    private List<Message> msgs = new();
    private string _hubUrl;
    private HubConnection chatHubConnection;
    //private HubConnection PlayersHubConnection;



    public async Task BeginChat() {

        if( !validateUserName() ) return;
        //gestionar si no existe otro usuario/validar nombre con ese tag y ver si la partida no ha empezado

        try {

            // Start chatting and force refresh UI.
            userConnected = true;
            await Task.Delay(1);

            // remove old messages if any
            //msgs.Clear();

            // Create the chat client
            string baseUrl = navigationManager.BaseUri;

            _hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;
            chatHubConnection = new HubConnectionBuilder()
                .WithUrl(_hubUrl)
                .Build();


            //_hubUrl = baseUrl.TrimEnd('/') + PlayerHub.HubUrl;
            //PlayersHubConnection = new HubConnectionBuilder()
            //    .WithUrl(_hubUrl)
            //    .Build();


            chatHubConnection.On<string,string>("Broadcast",BroadcastMessage);
            //PlayersHubConnection.On<string>("BroadcastPlayers",BroadcastPlayers);


            await chatHubConnection.StartAsync();
            //await PlayersHubConnection.StartAsync();


            await SendAsync($"{username} joined room.");

        }
        catch( Exception e ) {
            msg = $"ERROR: Failed to start chat client: {e.Message}";
            userConnected = false;
        }
    }

    public bool validateUserName() {

        if( username == null ) return false;
        return !string.IsNullOrEmpty(this.username.Trim());
    }

    private void BroadcastMessage( string name,string message ) {
        bool isMine = name.Equals(username,StringComparison.OrdinalIgnoreCase);

        msgs.Add(new Message(name,message,isMine));

        // Inform blazor the UI needs updating
        StateHasChanged();
    }




    private async Task DisconnectAsync() {
        if( userConnected ) {


            await SendInfoMessageAsync($"[Notice] {username} left room.");
            //PlayersConnected.Remove(username);
            await chatHubConnection.StopAsync();
            await chatHubConnection.DisposeAsync();
            chatHubConnection = null;



            //await PlayersHubConnection.StopAsync();
            //await PlayersHubConnection.DisposeAsync();
            //PlayersHubConnection = null;


            userConnected = false;
            StateHasChanged();
        }
    }

    private async Task SendAsync( string message ) {
        if( userConnected && !string.IsNullOrWhiteSpace(message) ) {

            //await PlayersHubConnection.SendAsync("BroadcastPlayers",username);
            await chatHubConnection.SendAsync("Broadcast",username,message);

            newmsg = string.Empty;
        }
    }
    private async Task SendInfoMessageAsync( string message ) {
        if( userConnected && !string.IsNullOrWhiteSpace(message) ) {

            await chatHubConnection.SendAsync("Broadcast",username,message);

            newmsg = string.Empty;
        }
    }



}
