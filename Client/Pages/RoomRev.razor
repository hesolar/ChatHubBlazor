@page "/RoomRevolution/{roomId}"
@using BlazorStrap
@using Client.Model.RoomRev.minesweeperLogic
@using Client.Model.RoomRev.minesweeperPresentation

<h3>This is the room rev 2.0 roomId: @roomId, still working on it:</h3>


<div class="alert-info" style="justify-content:center; width:contain; scroll-behavior:">
    <h2> Chismes de puntuacion</h2>
    Flags:<input type="text" disabled value="@logicaBuscaminas.FlagsRemaining" />
    <label for="puntuacion">Puntuacion:</label>
    <input type="number"
           style="  background-color:@(puntuacion.Item2? "green" : "red");
                    border: 1px solid #555;
                    box-sizing: border-box;
                    height: 20px;
                    width: 80px"
           value="@puntuacion.Item1" min="0" max="@logicaBuscaminas." step="1" disabled id="puntuacion" />

    Progress BAR:
    <input type="range" value="@( logicaBuscaminas.totalBombs- logicaBuscaminas.FlagsRemaining)" disabled style="color:mediumpurple" min="0" step="1" max="@logicaBuscaminas.totalBombs" />
</div>






<div class="card" style="align-content: start; width: fit-content; scroll-behavior: auto; ">
    <BSContainer>

        <h3>Board</h3>

        @foreach( var row in Casillas ) {
            <BSRow>
                @foreach( Casilla casilla in row ) {
                    <button disabled="@(casilla.isZero || casilla.seleccionadaCuadrado.Equals(Casilla.original))" style="width:30px; background-color:@casilla.seleccionadaCuadrado"
                            @oncontextmenu=" () => RightClick(casilla)"
                            @onclick="( e ) =>  LeftClick(e,casilla)"
                            @onmousewheel="(e) =>  LeftClick(e,casilla)">
                        <BSBadge Color="@casilla.ColorEstado">  @casilla.text  </BSBadge>
                    </button>
                }

            </BSRow>
        }
    </BSContainer>




    @if( logicaBuscaminas.Victory() ) {
        this.Casillas.ForEach(x => x.ForEach(y => y.pulsado = true));

        Presentacion.EstadoOriginalTablero(Casillas);
        <label> YOU WIN </label>
        <label> Puntuacion Total: @puntuacion</label>
    }

    <button hidden="@(!botonStartActivo)" @onclick="StartGame">Star</button>

    <input type="text" disabled @bind="@valorCronometro" />



</div>
Tiempo Turno:@((1+timeToMove).ToString("0.000")) seconds.


@code {


    const int rows = 15;
    [Parameter] public string roomId { set; get; }

    public Tuple<long,bool> puntuacion { get; set; } = new Tuple<long,bool>(0,true);


    //Logica buscaminas
    private MinesweeperLogic logicaBuscaminas = new MinesweeperLogic(rows);
    //Presentacion
    private List<List<Casilla>> Casillas { get; set; }




    protected override async Task OnInitializedAsync() {
        await Task.FromResult(this.Casillas = Presentacion.crearTablero(rows,logicaBuscaminas));
    }


    //Aciones mouse
    public async Task LeftClick( MouseEventArgs e,Casilla casilla ) {
        //left click
        if( e.Detail == 1 ) {
            if( !casilla.pulsado ) {
                if( !logicaBuscaminas.IsButtonFlagged(casilla.X,casilla.Y) ) {

                    if( !casilla.bomb ) {
                        logicaBuscaminas.MakeMove(casilla.X,casilla.Y);




                        int bombs = logicaBuscaminas.neighborBombs(casilla.X,casilla.Y);

                        casilla.MakeMove(bombs);

                        if( bombs == 0 ) {
                            Presentacion.RevealZeroSquaresRecursion(Casillas,casilla,logicaBuscaminas);
                        }

                        ActualizarPuntuacion(true);

                    }
                    else ActualizarPuntuacion(false);
                    await RestartNewTourn();
                    return;
                }


            }
            else MouseWheel(casilla);

        }



    }

    public void RightClick( Casilla casilla ) {
        //right click

        if( !casilla.pulsado ) {

            if( casilla.bomb && !casilla.flag ) {
                logicaBuscaminas.Flag(casilla.X,casilla.Y);
                casilla.Flag();
                casilla.Block();
                ActualizarPuntuacion(true,2);
            }
            else ActualizarPuntuacion(false);
            if( !this.logicaBuscaminas.Victory() ) Presentacion.ActualizarSeleccion(Casillas);
            RestartNewTourn();
        }
    }

    public async Task MouseWheel( Casilla mine ) {
        if( !mine.pulsado ) return;


        List<Casilla> flag = Presentacion.CasillasAdyacentes(Casillas,mine).Where(x => x.flag).ToList();
        List<Casilla> notFlagAndNotOpen = Presentacion.CasillasAdyacentes(Casillas,mine).Where(x => !x.pulsado && !x.flag).ToList();
        int bombsNeighbor = logicaBuscaminas.neighborBombs(mine.X,mine.Y);
        if( flag.Count.Equals(bombsNeighbor) ) {
            notFlagAndNotOpen.ForEach(x => {


                bombsNeighbor = logicaBuscaminas.neighborBombs(x.X,x.Y);
                if( bombsNeighbor == 0 ) {
                    x.MakeMove(0);
                    Presentacion.RevealZeroSquaresRecursion(Casillas,x,logicaBuscaminas);
                }
                else {
                    if( logicaBuscaminas.MakeMove(x.X,x.Y) ) x.MakeMove(bombsNeighbor);
                }
            });
            mine.Block();
            if( !Presentacion.MovesLeftOnSelectedArea(Casillas) ) {
                ActualizarPuntuacion(true);
                Presentacion.ActualizarSeleccion(Casillas);
            }
            ActualizarPuntuacion(true,1);
            await RestartNewTourn();
        }
    }

    //Puntuaciones
    public void ActualizarPuntuacion( bool acierto,int puntos = 1 ) {
        long p = puntuacion.Item1;
        p = acierto ? p + puntos : p - puntos;
        puntuacion = Tuple.Create(p,acierto);
    }


    //Crono
    int casillasAbiertas = 0;
    double timeToMove = 10;
    TimeSpan valorCronometro;
    bool cronometroFuncionando = false;
    bool botonStartActivo = true;


    async Task StartGame() {
        valorCronometro = new TimeSpan(0,0,11);
        botonStartActivo = false;
        cronometroFuncionando = true;

        Presentacion.UnlockBoard(Casillas);

        await Task.Delay(2000);

        Presentacion.ActualizarSeleccion(Casillas);

        await TimeLapse();

    }

    public async Task RestartNewTourn() {
        casillasAbiertas++;
        double difficulty= (double) (rows*rows-casillasAbiertas) / (double) (rows*rows) ;

        Console.WriteLine(difficulty);
        Presentacion.ActualizarSeleccion(Casillas);
        this.valorCronometro = new TimeSpan(0,0,0, (int)(1+Math.Round(timeToMove * difficulty)));

        //botonStartActivo = true;
        this.cronometroFuncionando = !cronometroFuncionando;
        await TimeLapse();
    }

    public async Task TimeLapse() {
        Console.WriteLine("entrada");
        Task.Delay(500);
        while( cronometroFuncionando && !logicaBuscaminas.Victory() ) {
            await Task.Delay(1);
            if( cronometroFuncionando && valorCronometro.TotalSeconds > 0 ) {

                valorCronometro = valorCronometro.Subtract(new TimeSpan(0,0,0,0,200));

                StateHasChanged();
            }
            else {
                valorCronometro = new TimeSpan(0,0,(int) (1+Math.Round(timeToMove)));
                cronometroFuncionando = true;
                ActualizarPuntuacion(false,5);
                await Task.Delay(500);
                Presentacion.ActualizarSeleccion(Casillas);


            }

        }
        cronometroFuncionando = true;
        Console.WriteLine("hello");


    }










}
