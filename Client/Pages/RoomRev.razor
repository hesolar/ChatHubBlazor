@page "/RoomRevolution/{roomId}"
@using BlazorStrap
@using Client.Model.RoomRev.minesweeperLogic
@using Client.Model.RoomRev.minesweeperPresentation

<h3>This is the room rev 2.0 roomId: @roomId, still working on it:</h3>


<div class="alert-info">
    <h2> Chismes de puntuacion</h2>
    <label for="puntuacion">Puntuacion:</label>
    <input type="text" value="@puntuacion.Item1" min="0" max="@logicaBuscaminas." step="1" disabled id="puntuacion" style="background-color:@(puntuacion.Item2? "green" : "red") " />
    <br> Progress BAR:
    <input type="range" value="@( logicaBuscaminas.totalBombs- logicaBuscaminas.FlagsRemaining)" disabled style="color:mediumpurple" min="0" step="1" max="@logicaBuscaminas.totalBombs" />

</div>

<br >
  
<div class=" alert-dark">
    <h2>Comenzar Partida</h2>
    <br>
    <label>Comenzar Partida</label>
    <button disabled="@(!botonStartActivo)" @onclick="StartGame">Star</button>
    <button @onclick="NewTourn">Stop</button>
    <label>Tiempo de turno</label>
    <input type="text" disabled @bind-value="@valorCronometro"/>
</div>




<div class="card">
    <BSContainer>

        <h3>Board</h3>

        @foreach( var row in Casillas ) {
            <BSRow>
                @foreach( Casilla casilla in row ) {
                    <button disabled="@(casilla.isZero || casilla.seleccionadaCuadrado.Equals("purple"))" style="width:30px; background-color:@casilla.seleccionadaCuadrado"
                            @oncontextmenu=" () => RightClick(casilla)"
                            @onclick="( e ) =>  LeftClick(e,casilla)"
                            @onmousewheel="(e) =>  LeftClick(e,casilla)">
                        <BSBadge Color="@casilla.ColorEstado">  @casilla.text  </BSBadge>
                    </button>
                }

            </BSRow>
        }
    </BSContainer>

    @*Indicadores
        bombs Remaining:   @game.bombsRemaining <br />
        bombs : @game.bombs <br />*@
    flags: @logicaBuscaminas.FlagsRemaining



    @if( logicaBuscaminas.Victory() ) {
        
        <label> YOU WIN </label>
    }



    <input type="text" disabled @bind="@valorCronometro" />
    <button @onclick="StartGame"> Start </button>



</div>

@code {



    [Parameter] public string roomId { set; get; }

    public Tuple<long,bool> puntuacion { get; set; } = new Tuple<long,bool>(0,true);

    const int rows = 20;
    //Logica buscaminas
    private MinesweeperLogic logicaBuscaminas = new MinesweeperLogic(rows);
    //Presentacion
    private List<List<Casilla>> Casillas { get; set; }




    protected override async Task OnInitializedAsync() {
        await Task.FromResult(this.Casillas = Presentacion.crearTablero(rows,logicaBuscaminas));
    }


    //Aciones mouse
    public void LeftClick( MouseEventArgs e,Casilla casilla ) {
        //left click
        if( e.Detail == 1 ) {
            if( !casilla.pulsado ) {
                if( !logicaBuscaminas.IsButtonFlagged(casilla.X,casilla.Y) ) {

                    if( !casilla.bomb ) {
                        logicaBuscaminas.MakeMove(casilla.X,casilla.Y);




                        int bombs = logicaBuscaminas.neighborBombs(casilla.X,casilla.Y);

                        casilla.MakeMove(bombs);

                        if( bombs == 0 ) {
                            Presentacion.RevealZeroSquaresRecursion(Casillas,casilla,logicaBuscaminas);
                        }

                        ActualizarPuntuacion(true);

                    }
                    else ActualizarPuntuacion(false);

                }
                NewTourn();
                //Presentacion.ActualizarSeleccion(Casillas);
            }

        }
        else MouseWheel(casilla);


    }

    public void RightClick( Casilla casilla ) {
        //right click

        if( !casilla.pulsado ) {

            if( casilla.bomb && !casilla.flag ) {
                logicaBuscaminas.Flag(casilla.X,casilla.Y);
                casilla.Flag();
                casilla.Block();
                ActualizarPuntuacion(true);
            }
            else ActualizarPuntuacion(false);
            if( !this.logicaBuscaminas.Victory() ) NewTourn();
            //Presentacion.ActualizarSeleccion(Casillas);

        }
    }

    public void MouseWheel( Casilla mine ) {
        if( !mine.pulsado ) return;


        List<Casilla> flag = Presentacion.CasillasAdyacentes(Casillas,mine).Where(x => x.flag).ToList();
        List<Casilla> notFlagAndNotOpen = Presentacion.CasillasAdyacentes(Casillas,mine).Where(x => !x.pulsado && !x.flag).ToList();
        int bombsNeighbor = logicaBuscaminas.neighborBombs(mine.X,mine.Y);
        if( flag.Count.Equals(bombsNeighbor) ) {
            notFlagAndNotOpen.ForEach(x => {


                bombsNeighbor = logicaBuscaminas.neighborBombs(x.X,x.Y);
                if( bombsNeighbor == 0 ) {
                    x.MakeMove(0);
                    Presentacion.RevealZeroSquaresRecursion(Casillas,x,logicaBuscaminas);
                }
                else {
                    if( logicaBuscaminas.MakeMove(x.X,x.Y) ) x.MakeMove(bombsNeighbor);
                }
            });
            mine.Block();
            if( !Presentacion.MovesLeftOnSelectedArea(Casillas) ) {
                ActualizarPuntuacion(true);
                NewTourn();
            }

        }
    }

    //Puntuaciones
    public void ActualizarPuntuacion( bool acierto ) {
        var p = puntuacion.Item1;
        p = acierto ? p + 1 : p - 1;
        puntuacion = Tuple.Create(p,acierto);
    }


    //Crono
    int timeToMove = 10;
    TimeSpan valorCronometro ;
    bool cronometroFuncionando = false;
    bool botonStartActivo = true;

    async Task StartGame() {
        valorCronometro = new TimeSpan(0,0,timeToMove);
        botonStartActivo = false;


        Presentacion.UnlockBoard(Casillas);


        Presentacion.ActualizarSeleccion(Casillas);

        await TimeLapse();

    }

    public async Task NewTourn() {
        Presentacion.ActualizarSeleccion(Casillas);
        cronometroFuncionando = false;
        this.valorCronometro = new TimeSpan(0,0,timeToMove);
        botonStartActivo = true;

        await TimeLapse();
    }

    public void Pause() {
        this.cronometroFuncionando = !cronometroFuncionando;
        TimeLapse();
    }

    public async Task TimeLapse() {
        cronometroFuncionando = true;
        while( cronometroFuncionando ) {
            await Task.Delay(1);
            if( cronometroFuncionando && valorCronometro.TotalSeconds > 0 ) {

                valorCronometro = valorCronometro.Subtract(new TimeSpan(0,0,0,0,500));

                StateHasChanged();
            }
            else {
                Presentacion.ActualizarSeleccion(Casillas);
                valorCronometro = new TimeSpan(0,0,timeToMove);
            }

            if( this.logicaBuscaminas.Victory() ) {
                this.Casillas.ForEach(x => x.ForEach(y => y.pulsado = true));

                Presentacion.EstadoOriginalTablero(Casillas);
                break;

            }
        }
    }










}
