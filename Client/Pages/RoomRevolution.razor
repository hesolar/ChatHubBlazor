@page "/RoomRevolution/{roomId}"
@using BlazorStrap
@using Client.Model.minesweeper

<h3>This is the room revolution 2.0 ultra fixed new electric mechanical manager room id: @roomId, still working on it:</h3>


<button @onclick=medirLos10SegundosConUnTask>Begin 10 seconds countdown to lost</button>
<button @onclick=Refresh>Comodin d desplegar</button>


<div class="card">
    <BSContainer>

        <h3>Board</h3>

        @foreach( var row in Squares2 ) {
            <BSRow>
                @foreach( Mine mine in row ) {
                    <button disabled="@(mine.isZero || mine.seleccionadaCuadrado.Equals("purple"))" style="width:30px; background-color:@mine.seleccionadaCuadrado"
                            @oncontextmenu=" (e)=>
                            { //right click
                            if( !mine.pulsado ) {
                            bool b=  game.Flag(mine.X,mine.Y);
                            mine.Flag();}
                            }"
                            @onclick="( e ) => { //left click

                                          Console.WriteLine(e.Button);
                                          if( e.Button == 0 ) {
                                              
                                              if( !mine.pulsado ) {
                                                  if( !game.IsButtonFlagged(mine.X,mine.Y) ) {
                                                      bool alive = game.MakeMove(mine.X,mine.Y);

                                                      int bombs = game.neighborBombs(mine.X,mine.Y);


                                                      if( alive ) {
                                                          int bombsNeighb = game.neighborBombs(mine.X,mine.Y);
                                                          mine.MakeMove(bombsNeighb);

                                                          if( game.neighborBombs(mine.X,mine.Y).Equals(0) ) {
                                                              RevealZeroSquaresRecursion(mine);
                                                          }
                                                          Refresh();
                                                      }
                                                      else Lost();
                                                  }

                                              }
                                              else {
                                                  MouseWheel(mine);
                                              }
                                          }

                                      }"
                            @onmousewheel="() => {

                                               if(mine.pulsado)MouseWheel(mine);

            }">
                        <BSBadge Color="@mine.ColorEstado">  @mine.text  </BSBadge>
                    </button>
                }

            </BSRow>
        }
    </BSContainer>

    @*Indicadores
        bombs Remaining:   @game.bombsRemaining <br />
        bombs : @game.bombs <br />*@
    flags: @game.FlagsRemaining



    @if( game.Victory() ) {
        this.Squares2.ForEach(x => x.ForEach(y => y.pulsado = true));
        <label> YOU WIN </label>
    }




</div>

@code {
    [Parameter] public string roomId { set; get; }
    List<List<Mine>> Squares2 { get; set; }



    const int rows = 20;
    public MinesweeperLogic game = new MinesweeperLogic(20);
    public Rectangle ventanaDeslizante;



    private void Refresh() {

        ventanaDeslizante.DoMove();
        int xa, xb, ya, yb;
        ventanaDeslizante.getBorders(out xa,out xb,out ya,out yb);


        List<Mine> x = Squares2.SelectMany(x => x.Where(z => z.X > xa && z.X <= xb)).ToList();
        List<Mine> y = Squares2.SelectMany(x => x.Where(z => z.Y > ya && z.Y <= yb)).ToList();
        List<Mine> xy = x.Intersect(y).ToList();
        xy.ForEach(x => x.seleccionadaCuadrado = "blue");



    }

    async Task medirLos10SegundosConUnTask() {
        System.Diagnostics.Debug.WriteLine("Starting Tourn");
        DateTime endTime = DateTime.UtcNow.AddSeconds(10);
        while( DateTime.UtcNow < endTime ) {
            await Task.Delay(100);
        }

        Lost();
        System.Diagnostics.Debug.WriteLine("Finished Tourn time");
    }

    protected override async Task OnInitializedAsync() {
        await Task.FromResult(this.Squares2 = createMineList());
        this.ventanaDeslizante = ventanaDeslizante = new Rectangle(5000,rows,2,10);
        Refresh();



    }

    public void MouseWheel( Mine mine ) {
        Func<Mine,List<Mine>> CasillasAdyacentes = (m => {
            List<Mine> vecinos = Squares2.SelectMany(z => z.Where(t => t.X + 1 == m.X || t.X - 1 == m.X || t.X == m.X)).Intersect(
          Squares2.SelectMany(z => z.Where(t => t.Y + 1 == m.Y || t.Y - 1 == m.Y || t.Y == m.Y))).ToList();
            vecinos.Remove(Squares2.SelectMany(z => z.Where(t => t.X == m.X && t.Y == m.Y)).First());
            return vecinos;
        });

        List<Mine> flag = CasillasAdyacentes(mine).Where(x => x.flag).ToList();
        List<Mine> notFlagAndNotOpen = CasillasAdyacentes(mine).Where(x => !x.pulsado && !x.flag).ToList();
        int bombsNeighbor = game.neighborBombs(mine.X,mine.Y);
        if( flag.Count.Equals(bombsNeighbor) ) {
            notFlagAndNotOpen.ForEach(x => {


                bombsNeighbor = game.neighborBombs(x.X,x.Y);
                if( bombsNeighbor == 0 ) {
                    x.MakeMove(0);
                    RevealZeroSquaresRecursion(x);
                }
                else {
                    if( game.MakeMove(x.X,x.Y) ) x.MakeMove(bombsNeighbor);
                    else Lost();
                }
            });
            Refresh();

        }


    }

    public void RevealZeroSquaresRecursion( Mine mine ) {


        Func<Mine,List<Mine>> CasillasAdyacentes = (m => {
            List<Mine> vecinos = Squares2.SelectMany(z => z.Where(t => t.X + 1 == m.X || t.X - 1 == m.X || t.X == m.X)).Intersect(
          Squares2.SelectMany(z => z.Where(t => t.Y + 1 == m.Y || t.Y - 1 == m.Y || t.Y == m.Y))).ToList();
            vecinos.Remove(Squares2.SelectMany(z => z.Where(t => t.X == m.X && t.Y == m.Y)).First());
            return vecinos;
        });



        List<Mine> minesNeighbors = CasillasAdyacentes(mine);

        //las no zero las despliego
        var notZeroMines = minesNeighbors.Where(x => !x.flag && game.neighborBombs(x.X,x.Y) != 0).ToList();
        notZeroMines.ForEach(z => z.MakeMove(game.neighborBombs(z.X,z.Y)));

        //las casillas con 0
        var ZeroMines = minesNeighbors.Where(z => !z.flag && game.neighborBombs(z.X,z.Y).Equals(0)).ToList();

        foreach( Mine m in ZeroMines ) {

            m.MakeMove(0);
            List<Mine> a = CasillasAdyacentes(m);
            a.AsParallel().ToList().Where(x => !x.flag && game.neighborBombs(x.X,x.Y) != 0).ToList().ForEach(x => x.MakeMove(game.neighborBombs(x.X,x.Y)));

            List<Mine> b = a.Where(x => !x.flag && game.neighborBombs(x.X,x.Y) == 0 && !x.pulsado).ToList();
            b.AsParallel().ToList().ForEach(x => x.MakeMove(0));
            b.AsParallel().ToList().ForEach(x => RevealZeroSquaresRecursion(x));



        }
    }

    public List<List<Mine>> createMineList() {


        //referencia
        var result = new List<List<Mine>>();
        for( var x = 0; x < rows; x++ ) {
            var row = new List<Mine>();
            for( var y = 0; y < rows; y++ ) {
                row.Add(new Mine(x,y,game.IsBomb(x,y)));
            }
            result.Add(row);
        }
        return result;

        //List<List<Mine>> l = new List<List<Mine>>();
        //List<Mine> aux = new List<Mine>();
        //for( int x = 0; x < rows; x++ ) {
        //    int xa = x;
        //    aux.Clear();
        //    for( int y = 0; y < rows; y++ ) {
        //        int ya = y;
        //        aux.Add(new Mine(xa,ya));
        //    l.Add(aux);
        //}
        //    return l;

    }

    public void Lost() {


        Squares2.AsParallel().ToList().ForEach(x => x.Where(y => y.bomb && y.text.Equals("")).ToList().ForEach(d => d.ColorEstado = Color.Danger)); ;
        //Squares2.ForEach(x => x.Where(y => !y.bomb ).ToList().ForEach(d => d.ClassName = Color.Info));


        this.Squares2.AsParallel().ToList().ForEach(x => x.ForEach(y => y.pulsado = true));



    }

    public void Win() {
        this.Squares2.ForEach(x => x.ForEach(y => y.pulsado = true));

    }





    public class Mine {


        public bool isZero;
        public Boolean pulsado { get; set; }
        public String text;
        public int X { get; set; }
        public int Y { get; set; }
        public Color ColorEstado { get; set; }
        public bool bomb;
        public bool flag = false;

        //ventana deslizante
        public string seleccionadaCuadrado { set; get; }

        public Mine( int x,int y,bool bomb ) {
            this.X = x;
            this.Y = y;
            //await Task.FromResult(

            ColorEstado = Color.None;
            this.pulsado = false;
            this.bomb = bomb;
            this.text = "";
            this.isZero = false;

            this.seleccionadaCuadrado = "purple";
        }
        public void MakeMove( int bombsNeighbor ) {

            ColorEstado = Color.Success;
            pulsado = true;
            this.text = bombsNeighbor.ToString();
            if( bombsNeighbor.Equals(0) ) this.isZero = true;

        }
        public void Flag() {
            //game.Flag(X,Y);
            flag = !flag;
            ColorEstado = this.flag ? Color.Primary : Color.None;


        }




    }







}
}
