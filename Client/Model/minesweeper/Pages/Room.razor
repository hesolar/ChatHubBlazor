@page "/Room/{roomId}"
@using BlazorStrap
@using Client.Model.minesweeper

<h3>This is the room manager id: @roomId, still working on it:</h3>

<div class="card">
    <BSContainer>

        <h3>Board</h3>

        @foreach( var row in Squares2 ) {
            <BSRow>
                @foreach( Mine mine in row ) {



                    <button disabled="@mine.pulsado"
                            @oncontextmenu="(e) => { //right de momento
                                                     if( !mine.pulsado ) {
                                                     Console.WriteLine(e.Button);
                                                     bool b=  game.Flag(mine.X,mine.Y);
                                                     mine.Flag(b);}
                                                 }"
                            @onclick="(e) => { //left
                                          if( e.Button == 0 ) {

                                              if( ! game.IsButtonFlagged(mine.X,mine.Y) ) {
                                                  bool alive = game.MakeMove(mine.X,mine.Y);

                                                  if( !alive ) Lost();
                                                  else {
                                                      mine.MakeMove(game.BombsNeighbors(mine.X,mine.Y).ToString());

                                                  }



                                              }
                                          }

                                      }">
                        <BSBadge Color="@mine.ColorEstado">  @mine.text  </BSBadge>
                    </button>
                }

            </BSRow>
        }
    </BSContainer>
    bombs Remaining:   @game.bombsRemaining <br />
    bombs : @game.bombs <br />
    flags: @game.flagsRemaining


    @if( game.Victory() ) {
        this.Squares2.ForEach(x => x.ForEach(y => y.pulsado = true));
        <label> YOU WIN </label>

    }

</div>

@code {
    [Parameter] public string roomId { set; get; }
    List<List<Mine>> Squares2 { get; set; }



    int rows = 5;
    public MinesweeperLogic game = new MinesweeperLogic(5);




    protected override async Task OnInitializedAsync() {
        await Task.FromResult(this.Squares2 = createMineList());
    }


    public List<List<Mine>> createMineList( int size = 5 ) {


        //referencia
        var result = new List<List<Mine>>();
        for( var x = 0; x < size; x++ ) {
            var row = new List<Mine>();
            for( var y = 0; y < size; y++ ) {
                row.Add(new Mine(x,y,game.IsBomb(x,y)));
            }
            result.Add(row);
        }
        return result;

        //List<List<Mine>> l = new List<List<Mine>>();
        //List<Mine> aux = new List<Mine>();
        //for( int x = 0; x < rows; x++ ) {
        //    int xa = x;
        //    aux.Clear();
        //    for( int y = 0; y < rows; y++ ) {
        //        int ya = y;
        //        aux.Add(new Mine(xa,ya));
        //    l.Add(aux);
        //}
        //    return l;

    }

    public void Lost() {


        Squares2.ForEach(x => x.Where(y => y.bomb && string.IsNullOrEmpty(y.text) ).ToList().ForEach(d=>d.ColorEstado=Color.Danger     ));;
        //Squares2.ForEach(x => x.Where(y => !y.bomb ).ToList().ForEach(d => d.ClassName = Color.Info));


        this.Squares2.ForEach(x => x.ForEach(y =>y.pulsado=true));



    }
    public void Win() {
        this.Squares2.ForEach(x => x.ForEach(y => y.pulsado = true));

    }

    public class Mine {



        public Boolean pulsado { get; set; }
        public String text;
        public int X { get; set; }
        public int Y { get; set; }
        public Color ColorEstado { get; set; }
        public bool bomb;

        public Mine( int x,int y,bool bomb) {
            this.X = x;
            this.Y = y;
            //await Task.FromResult(

            ColorEstado = Color.Secondary;
            this.pulsado = false;
            this.bomb = bomb;
        }
        public void MakeMove(String bombsNeighbor) {

            ColorEstado = Color.Success;
            pulsado = true;
            this.text = bombsNeighbor;

        }
        public void Flag(bool b) {
            //game.Flag(X,Y);

            ColorEstado =b? Color.Primary: Color.Secondary;


        }



    }

}
