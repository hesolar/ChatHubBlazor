@page "/Room/{roomId}"
@using BlazorStrap
@using Client.Model.minesweeper

<h3>This is the room manager id: @roomId, still working on it:</h3>

<div class="card">
    <BSContainer>

        <h3>Board</h3>

        @foreach( var row in Squares2 ) {
            <BSRow>
                @foreach( Mine mine in row ) {



                    <button disabled="@mine.pulsado"
                            @oncontextmenu="(e) => { //right click
                                                     if( !mine.pulsado ) {
                                                     bool b=  game.Flag(mine.X,mine.Y);
                                                     mine.Flag();}
                                                 }"
                            @onclick="( e ) => { //left click
                                          if( e.Button == 0 ) {

                                              if( !game.IsButtonFlagged(mine.X,mine.Y) ) {
                                                  bool alive = game.MakeMove(mine.X,mine.Y);

                                                  int bombs = game.neighborBombs(mine.X,mine.Y);


                                                  if( alive ) {
                                                      int bombsNeighb = game.neighborBombs(mine.X,mine.Y);
                                                      mine.MakeMove(bombsNeighb.ToString());

                                                      if( game.neighborBombs(mine.X,mine.Y).Equals(0)){
                                                          neighbors(mine);
                                                      }

                                                      



                                                         

                                                          
                                                          








                                                      
                                                  }
                                                  else Lost();


                                              }
                                          }

                                      }">
                        <BSBadge Color="@mine.ColorEstado">  @mine.text  </BSBadge>
                    </button>
                }

            </BSRow>
        }
    </BSContainer>
     
    @*Indicadores
    bombs Remaining:   @game.bombsRemaining <br />
    bombs : @game.bombs <br />*@
    flags: @game.FlagsRemaining


    @if( game.Victory() ) {
        this.Squares2.ForEach(x => x.ForEach(y => y.pulsado = true));
        <label> YOU WIN </label>
    }

</div>

@code {
    [Parameter] public string roomId { set; get; }
    List<List<Mine>> Squares2 { get; set; }



    int rows = 20;
    public MinesweeperLogic game = new MinesweeperLogic(20);




    protected override async Task OnInitializedAsync() {
        await Task.FromResult(this.Squares2 = createMineList());
    }

    public void neighbors(Mine mine) {
        List<Mine> minesNeighbors= Squares2.SelectMany(z => z.Where(t => t.X + 1 == mine.X || t.X - 1 == mine.X || t.X == mine.X)).Intersect(
                                                             Squares2.SelectMany(z => z.Where(t => t.Y + 1 == mine.Y || t.Y - 1 == mine.Y || t.Y == mine.Y))).ToList();

        minesNeighbors.Remove(minesNeighbors.Where(x=>x.X==mine.X && x.Y==mine.Y).First());
        minesNeighbors.Where(x=>!x.flag).ToList().ForEach(z => z.MakeMove(game.neighborBombs(z.X,z.Y).ToString()));




        var zeroMines =minesNeighbors.Where(x =>!x.flag && !x.pulsado && game.neighborBombs(x.X,x.Y).ToString().Equals(0.ToString())).ToList();

        zeroMines.ForEach(x => x.MakeMove(game.neighborBombs(x.X,x.Y).ToString()));
        zeroMines.Where(x => x.pulsado).ToList().ForEach(x => neighbors(x));




    }

    public List<List<Mine>> createMineList(  ) {


        //referencia
        var result = new List<List<Mine>>();
        for( var x = 0; x < rows; x++ ) {
            var row = new List<Mine>();
            for( var y = 0; y < rows; y++ ) {
                row.Add(new Mine(x,y,game.IsBomb(x,y)));
            }
            result.Add(row);
        }
        return result;

        //List<List<Mine>> l = new List<List<Mine>>();
        //List<Mine> aux = new List<Mine>();
        //for( int x = 0; x < rows; x++ ) {
        //    int xa = x;
        //    aux.Clear();
        //    for( int y = 0; y < rows; y++ ) {
        //        int ya = y;
        //        aux.Add(new Mine(xa,ya));
        //    l.Add(aux);
        //}
        //    return l;

    }

    public void Lost() {


        Squares2.ForEach(x => x.Where(y => y.bomb && y.text.Equals("-") ).ToList().ForEach(d=>d.ColorEstado=Color.Danger     ));;
        //Squares2.ForEach(x => x.Where(y => !y.bomb ).ToList().ForEach(d => d.ClassName = Color.Info));


        this.Squares2.ForEach(x => x.ForEach(y =>y.pulsado=true));



    }
    public void Win() {
        this.Squares2.ForEach(x => x.ForEach(y => y.pulsado = true));

    }

    public class Mine {



        public Boolean pulsado { get; set; }
        public String text;
        public int X { get; set; }
        public int Y { get; set; }
        public Color ColorEstado { get; set; }
        public bool bomb;
        public bool flag = false;

        public Mine( int x,int y,bool bomb ) {
            this.X = x;
            this.Y = y;
            //await Task.FromResult(

            ColorEstado = Color.Secondary;
            this.pulsado = false;
            this.bomb = bomb;
            this.text = "-";
        }
        public void MakeMove( String bombsNeighbor ) {

            ColorEstado = Color.Success;
            pulsado = true;
            this.text = bombsNeighbor;


        }
        public void Flag( ) {
            //game.Flag(X,Y);
            flag = !flag;
            ColorEstado = this.flag ? Color.Primary : Color.Secondary;


        }


    }

}
